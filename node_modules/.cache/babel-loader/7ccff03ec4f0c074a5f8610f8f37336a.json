{"ast":null,"code":"var _jsxFileName = \"E:\\\\Working Files\\\\GitHub\\\\cov19\\\\src\\\\Components\\\\RouterDom\\\\Search.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\nexport default function Search() {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      const {\n        inputValue\n      } = params; // Suggest the creation of a new value\n\n      const isExisting = options.some(option => inputValue === option.title);\n\n      if (inputValue !== '' && !isExisting) {\n        filtered.push({\n          inputValue,\n          title: `Add \"${inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: (props, option) => /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n      children: option.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 40\n    }, this),\n    sx: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      className: \"flex sm:justify-center space-x-4\",\n      ...params,\n      label: \"Type Here That You Wanna Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_s(Search, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = Search;\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["E:/Working Files/GitHub/cov19/src/Components/RouterDom/Search.jsx"],"names":["React","TextField","Autocomplete","createFilterOptions","filter","Search","value","setValue","useState","event","newValue","title","inputValue","options","params","filtered","isExisting","some","option","push","top100Films","props","width","year"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function Search() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        const { inputValue } = params;\r\n        // Suggest the creation of a new value\r\n        const isExisting = options.some((option) => inputValue === option.title);\r\n        if (inputValue !== '' && !isExisting) {\r\n          filtered.push({\r\n            inputValue,\r\n            title: `Add \"${inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(props, option) => <li {...props}>{option.title}</li>}\r\n      sx={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField className= 'flex sm:justify-center space-x-4' {...params} label=\"Type Here That You Wanna Search\" />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  {\r\n    title: 'The Lord of the Rings: The Return of the King',\r\n    year: 2003,\r\n  },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  {\r\n    title: 'The Lord of the Rings: The Fellowship of the Ring',\r\n    year: 2001,\r\n  },\r\n  {\r\n    title: 'Star Wars: Episode V - The Empire Strikes Back',\r\n    year: 1980,\r\n  },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  {\r\n    title: 'The Lord of the Rings: The Two Towers',\r\n    year: 2002,\r\n  },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  {\r\n    title: 'Star Wars: Episode IV - A New Hope',\r\n    year: 1977,\r\n  },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  {\r\n    title: 'Star Wars: Episode VI - Return of the Jedi',\r\n    year: 1983,\r\n  },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  {\r\n    title: 'Eternal Sunshine of the Spotless Mind',\r\n    year: 2004,\r\n  },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}